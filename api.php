<?phprequire_once('config.php'); $crowd_offline = false;$username = NULL; try {	// http://pear.php.net/package/Services_Atlassian_Crowd	require_once('Services/Atlassian/Crowd.php');		$crowd = new Services_Atlassian_Crowd(array(		'app_name' => $crowd_app_name,		'app_credential' => $crowd_app_password,		'service_url' => $crowd_url,	));}catch (Exception $e) {	// looks like the crowd auth is offline, need a fallback!	$crowd_offline = true;		if (!isset($_SERVER['PHP_AUTH_USER'])) {		header('WWW-Authenticate: Basic realm="RPC3-20 Failover Login"');		header('HTTP/1.0 401 Unauthorized');		// echo 'Text to send if user hits Cancel button';		// exit;	} else {		if ($_SERVER['PHP_AUTH_USER'] == $failover_username && $_SERVER['PHP_AUTH_PW'] == $failover_password)		{			$username = $_SERVER['PHP_AUTH_USER'];			$principal->name = 'Override Account';		}		else		{			header('WWW-Authenticate: Basic realm="RPC3-20 Failover Login"');			header('HTTP/1.0 401 Unauthorized');		}	}} if (!$crowd_offline){	$crowd->authenticateApplication();	$is_authenticated = FALSE;	if (!empty($_COOKIE['crowd_token_key']))	{		try {			// If the user already had a crowd token, we need to verify that it's still valid			$is_authenticated = $crowd->isValidPrincipalToken(				$_COOKIE['crowd_token_key'],				$_SERVER['HTTP_USER_AGENT'],				$_SERVER['REMOTE_ADDR']			);		}		catch (Services_Atlassian_Crowd_Exception $e) 		{			// reprompt for login. User doesn't have access to this app.			// header('WWW-Authenticate: Basic realm="RPC3-20 Power Manager Login"');			header('HTTP/1.0 401 Unauthorized');			exit;		}	}	if (!$is_authenticated)	{		if (!isset($_SERVER['PHP_AUTH_USER'])) {			header('WWW-Authenticate: Basic realm="RPC3-20 Power Manager Login"');			header('HTTP/1.0 401 Unauthorized');			echo 'Forbidden.';			exit;		}	 		try		{			$_COOKIE['crowd_token_key'] = $crowd->authenticatePrincipal(				$_SERVER['PHP_AUTH_USER'],				$_SERVER['PHP_AUTH_PW'],				$_SERVER['HTTP_USER_AGENT'],				$_SERVER['REMOTE_ADDR']			);	 			setcookie('crowd_token_key', $_COOKIE['crowd_token_key'], time() + 3600);	 			$is_authenticated = TRUE;		}		catch (Services_Atlassian_Crowd_Exception $e)		{			// I have no idea why, but instead of throwing an			// invalid username or password exception, we get			// an exception with the username provided if either is wrong.			if ($e->getMessage() == $_SERVER['PHP_AUTH_USER'])			{				header('WWW-Authenticate: Basic realm="RPC3-20 Power Manager Login"');			}			throw $e;		}	}	 	if ($is_authenticated)	{		$principal = $crowd->findPrincipalByToken($_COOKIE['crowd_token_key']);		// Even though the user may have supplied a username, it's not case sensitive		// and this will make sure the username is always consistent whether they signed		// in using another application or they used http authentication.		$username = $principal->name;	}	if (empty($username))	{		header('HTTP/1.0 401 Unauthorized');		echo 'Forbidden.';		exit;	}}if (!empty($username)){	header('Access-Control-Allow-Origin: *'); 	require_once("telnet.php");	// if($_SERVER['REMOTE_ADDR']=="70.73.25.25" || $_SERVER['REMOTE_ADDR']=="10.1.1.3")	// {	  // ini_set('display_errors','On');	// }	// else	// {	  ini_set('display_errors','Off');	// } 	$conn = new Telnet($rpc_ip, $rpc_port, 15, '>', 5);	$out = "";	try {		$conn->connect();		$conn->login($rpc_user,$rpc_pass);		$out = $conn->getBuffer();		$conn->waitPrompt();				if(isset($_GET['cmd']))		{			if (isset($_GET['outlet']) && $_GET['outlet'] <= 8 && $_GET['outlet'] >= 1)			{				$conn->exec($_GET['cmd'] . ' ' . $_GET['outlet']);			} 			else			{				$conn->exec($_GET['cmd']);			}			$conn->setPrompt('>');			$conn->waitPrompt();			$conn->exec('Y');			$out = $conn->getBuffer();			$conn->setPrompt('>');			$conn->waitPrompt();			$conn->exec('');		   		}				$conn->disconnect();	} catch (Exception $ex) {		$conn->disconnect();		//print_r($ex);	}	$output = array();	preg_match("/True RMS current:  ([\d|\.|]*) Amps/", $out, $cur_amps);	array_push($output, array("Current"=>$cur_amps[1],"Unit"=>"Amps"));	preg_match("/Maximum Detected:  ([\d|\.|]*) Amps/", $out, $max_amps);	array_push($output, array("MaxCurrent"=>$max_amps[1],"Unit"=>"Amps"));	preg_match("/Temperature: ([\d|\.|]*) (C|F)/", $out, $temp);	array_push($output, array("Temp"=>$temp[1],"Unit"=>$temp[2]));	preg_match_all("/\d(?:\s{1,10})([a-zA-Z]+)\s+(\d)\s+(On|Off)/", $out, $outlets);	$names = $outlets[1];	$ids = $outlets[2];	$status= $outlets[3];	$outlets = array();	for($n=0;$n<count($names);$n++) 	{		$array = array("ID"=>$ids[$n], "Name"=>$names[$n], "Status"=>$status[$n]);		array_push($outlets, $array);	}	array_push($output, array("Outlets"=>$outlets));	//print_r($output);	echo json_encode($output);	//echo $out;}